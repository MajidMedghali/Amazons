        -:    0:Source:src/hole.c
        -:    1:
        -:    2:#include "hole.h"
        -:    3:
        -:    4:
        -:    5:
      456:    6:void  make_zero_i_j(struct graph_t *g, int i, int j){
      456:    7:    size_t row_start = g->t->p[i];
      456:    8:    size_t row_end = g->t->p[i + 1];
     2490:    9:    for( size_t pos = row_start; pos < row_end; ++pos){
     2409:   10:        if(g->t->i[pos] == j){
   101634:   11:            for( size_t k = pos ; k < g->t->nz - 1 ; ++k){
   101259:   12:                g->t->data[k] = g->t->data[k+1];
   101259:   13:                g->t->i[k] = g->t->i[k+1];
        -:   14:        }
      375:   15:        g->t->nz--;
     5255:   16:        for( size_t k = i+1; k <= g->t->size1; ++k) g->t->p[k] --;
      375:   17:        return ;
        -:   18:        }
        -:   19:    }
        -:   20:}
        -:   21:
        1:   22:void  make_hole(struct graph_t *g, int id, int size){
        1:   23:  int vertices = g->num_vertices;
        1:   24:  int n=(int)sqrt(vertices);
       26:   25:  for(int i=0; i<vertices; i++){
      650:   26:    for(int j=0;j<vertices ;j++){
      625:   27:       if( (j % n >= id % n && j % n < (id + size) % n) && (j / n >= id / n && j / n < id / n + size)){//ligne de j appartient au trou
      225:   28:              make_zero_i_j(g, i, j);
      225:   29:              make_zero_i_j(g, j, i);
        -:   30:      }
        -:   31:    }
        -:   32:  }
        1:   33:}
