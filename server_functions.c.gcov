        -:    0:Source:src/server_functions.c
        -:    1:#include "server_functions.h"
        -:    2:
        -:    3:#define ANSI_COLOR_RED     "\e[41m"
        -:    4:#define ANSI_COLOR_GREEN   "\e[42m"
        -:    5:#define ANSI_COLOR_ORANGE  "\e[43m"
        -:    6:#define ANSI_COLOR_YELLOW  "\e[0;103m"
        -:    7:#define ANSI_COLOR_BLUE    "\e[44m"
        -:    8:#define ANSI_COLOR_PINK    "\e[0;105m"
        -:    9:#define ANSI_COLOR_CYAN    "\e[46m"
        -:   10:#define ANSI_COLOR_VIOLET  "\e[45m"
        -:   11:#define ANSI_COLOR_BLACK  "\e[40m"
        -:   12:#define ANSI_COLOR_RESET   "\e[0m"
        -:   13:
        -:   14:
        -:   15:
        -:   16:
        -:   17:extern int empty_cell(struct graph_t *graph, int x, unsigned int size);
        -:   18:
        -:   19:/*This function parses command-line arguments to extract the game 
        -:   20:settings, including the game type, board size, and number of turns.
        -:   21:It takes in argc and argv[] parameters from the command line and 
        -:   22:sets the values of type, length, and turns pointers.*/
    #####:   23:void get_opt(int argc, char* argv[], char* type, unsigned int *length, unsigned int* turns){
        -:   24:    extern char *optarg;
    #####:   25:    int opt=0; //we set the default type of world at squared world
    #####:   26:    while((opt=getopt(argc, argv, "s:m:t:h")) != -1){
    #####:   27:        switch(opt){
    #####:   28:            case 'm':
    #####:   29:                if(optarg!=NULL){
    #####:   30:                    *length=atoi(optarg); // update the value of length
        -:   31:                }
    #####:   32:                break;
    #####:   33:            case 's':
    #####:   34:                if(optarg!=NULL){
        -:   35:                    //printf("turns = %d\n", *turns);
    #####:   36:                    *turns=atoi(optarg); // update the value of turns
        -:   37:                    //printf("turns = %d\n", *turns);
        -:   38:                }
    #####:   39:                break;
    #####:   40:            case 't':
    #####:   41:                 if(optarg!=NULL){
    #####:   42:                    *type = optarg[0]; // update the value of type
        -:   43:                }
    #####:   44:                break;
    #####:   45:            case 'h':
    #####:   46:                printf("usage: ./project [-h help]\n \t \t [-m allows you to specify the width of the game board] \n \t \t [-t allows you to specify the shape of the game board (square grid c, donut d, cloverleaf t or figure eight 8 ) \n]");
    #####:   47:                return;
        -:   48:                break;
    #####:   49:            default:
    #####:   50:                break;
        -:   51:        }
        -:   52:    }
        -:   53:}
------------------
get_opt:
    #####:   23:void get_opt(int argc, char* argv[], char* type, unsigned int *length, unsigned int* turns){
        -:   24:    extern char *optarg;
    #####:   25:    int opt=0; //we set the default type of world at squared world
    #####:   26:    while((opt=getopt(argc, argv, "s:m:t:h")) != -1){
    #####:   27:        switch(opt){
    #####:   28:            case 'm':
    #####:   29:                if(optarg!=NULL){
    #####:   30:                    *length=atoi(optarg); // update the value of length
        -:   31:                }
    #####:   32:                break;
    #####:   33:            case 's':
    #####:   34:                if(optarg!=NULL){
        -:   35:                    //printf("turns = %d\n", *turns);
    #####:   36:                    *turns=atoi(optarg); // update the value of turns
        -:   37:                    //printf("turns = %d\n", *turns);
        -:   38:                }
    #####:   39:                break;
    #####:   40:            case 't':
    #####:   41:                 if(optarg!=NULL){
    #####:   42:                    *type = optarg[0]; // update the value of type
        -:   43:                }
    #####:   44:                break;
    #####:   45:            case 'h':
    #####:   46:                printf("usage: ./project [-h help]\n \t \t [-m allows you to specify the width of the game board] \n \t \t [-t allows you to specify the shape of the game board (square grid c, donut d, cloverleaf t or figure eight 8 ) \n]");
    #####:   47:                return;
        -:   48:                break;
    #####:   49:            default:
    #####:   50:                break;
        -:   51:        }
        -:   52:    }
        -:   53:}
------------------
get_opt:
    #####:   23:void get_opt(int argc, char* argv[], char* type, unsigned int *length, unsigned int* turns){
        -:   24:    extern char *optarg;
    #####:   25:    int opt=0; //we set the default type of world at squared world
    #####:   26:    while((opt=getopt(argc, argv, "s:m:t:h")) != -1){
    #####:   27:        switch(opt){
    #####:   28:            case 'm':
    #####:   29:                if(optarg!=NULL){
    #####:   30:                    *length=atoi(optarg); // update the value of length
        -:   31:                }
    #####:   32:                break;
    #####:   33:            case 's':
    #####:   34:                if(optarg!=NULL){
        -:   35:                    //printf("turns = %d\n", *turns);
    #####:   36:                    *turns=atoi(optarg); // update the value of turns
        -:   37:                    //printf("turns = %d\n", *turns);
        -:   38:                }
    #####:   39:                break;
    #####:   40:            case 't':
    #####:   41:                 if(optarg!=NULL){
    #####:   42:                    *type = optarg[0]; // update the value of type
        -:   43:                }
    #####:   44:                break;
    #####:   45:            case 'h':
    #####:   46:                printf("usage: ./project [-h help]\n \t \t [-m allows you to specify the width of the game board] \n \t \t [-t allows you to specify the shape of the game board (square grid c, donut d, cloverleaf t or figure eight 8 ) \n]");
    #####:   47:                return;
        -:   48:                break;
    #####:   49:            default:
    #####:   50:                break;
        -:   51:        }
        -:   52:    }
        -:   53:}
------------------
        -:   54:
        -:   55:/*This function creates a table representation of the game board using the graph data structure. 
        -:   56:It returns an integer pointer to the table.*/
       7*:   57:int *graph_table(struct graph_t *graph){
       7*:   58:    unsigned int length=sqrt(graph->t->size1);
       7*:   59:    int *t=(int *)malloc(sizeof(int)*length*length);
     217*:   60:    for(unsigned int i=0 ; i<length*length;i++){
     210*:   61:     if(empty_cell(graph,i,length*length))   
    #####:   62:            t[i]=-1;
     210*:   63:        else t[i]=0;
        -:   64:    }
       7*:   65:    return t;
        -:   66:}
------------------
graph_table:
    #####:   57:int *graph_table(struct graph_t *graph){
    #####:   58:    unsigned int length=sqrt(graph->t->size1);
    #####:   59:    int *t=(int *)malloc(sizeof(int)*length*length);
    #####:   60:    for(unsigned int i=0 ; i<length*length;i++){
    #####:   61:     if(empty_cell(graph,i,length*length))   
    #####:   62:            t[i]=-1;
    #####:   63:        else t[i]=0;
        -:   64:    }
    #####:   65:    return t;
        -:   66:}
------------------
graph_table:
        7:   57:int *graph_table(struct graph_t *graph){
        7:   58:    unsigned int length=sqrt(graph->t->size1);
        7:   59:    int *t=(int *)malloc(sizeof(int)*length*length);
      217:   60:    for(unsigned int i=0 ; i<length*length;i++){
      210:   61:     if(empty_cell(graph,i,length*length))   
    #####:   62:            t[i]=-1;
      210:   63:        else t[i]=0;
        -:   64:    }
        7:   65:    return t;
        -:   66:}
------------------
        -:   67:
        -:   68:
        -:   69:/*This function takes in the positions of the queens and the number of queens and 
        -:   70:creates a table representation of the game board, where each 
        -:   71:cell in the table represents a position on the board, and a value 
        -:   72:of 1 indicates that there is a queen in that position.*/
       6*:   73:void table(unsigned int* queens[NUM_PLAYERS], int *t, unsigned int queens_number){
      23*:   74:    for(unsigned int i=0;i<queens_number;i++){
      17*:   75:        t[queens[0][i]]=1;
      17*:   76:        t[queens[1][i]]=2;
        -:   77:    }
        -:   78:    
       6*:   79:}
------------------
table:
    #####:   73:void table(unsigned int* queens[NUM_PLAYERS], int *t, unsigned int queens_number){
    #####:   74:    for(unsigned int i=0;i<queens_number;i++){
    #####:   75:        t[queens[0][i]]=1;
    #####:   76:        t[queens[1][i]]=2;
        -:   77:    }
        -:   78:    
    #####:   79:}
------------------
table:
        6:   73:void table(unsigned int* queens[NUM_PLAYERS], int *t, unsigned int queens_number){
       23:   74:    for(unsigned int i=0;i<queens_number;i++){
       17:   75:        t[queens[0][i]]=1;
       17:   76:        t[queens[1][i]]=2;
        -:   77:    }
        -:   78:    
        6:   79:}
------------------
        -:   80:
        -:   81:
        -:   82:/*This function is used to display the current state of the game 
        -:   83:using the SDL library. It takes in the game board, the positions 
        -:   84:of the queens, the number of queens, and the size of the window 
        -:   85:as parameters. It then displays the game board and the queen 
        -:   86:positions on the screen.*/
       1*:   87:void sdl_display(struct graph_t* graph, unsigned int* queens[NUM_PLAYERS],int queens_number, int size){
        -:   88:
       1*:   89:    int n=0;//green 255*255
       1*:   90:    int b=255+255+0;//brown \\white  16777215
       1*:   91:    int bh=65536*255+140;
        -:   92:    (void) bh;
       1*:   93:    int nh=160*65536+100*255+19;//50+255*30+65536*15;
       1*:   94:    int c0=205*205;
       1*:   95:    int c1=16777215;
        -:   96://160*65536+100*255+19; red: 255+255+0;
        -:   97:
        -:   98://65536*80+100;
       1*:   99:int tmp=0;
       1*:  100:    int *t=graph_table(graph);
       1*:  101:    table(queens,t,queens_number);
      17*:  102:    for(int i=0;i<size*size;i++){
      16*:  103:        if(i%size==0 && i!=0) printf("\n");
      16*:  104:        if(t[i]==-1) printf("%d ",nh);
      16*:  105:        if(t[i]==1) printf("%d ",b);
      16*:  106:        if(t[i]==2) printf("%d ", n);
      16*:  107:        if(t[i]==0){
      12*:  108:            if(tmp==0) printf("%d ", c0);
      12*:  109:            if(tmp==1) printf("%d ",c1 );
        -:  110:        }
      16*:  111:        if((i+1)%size!=0 ) tmp=(tmp+1)%2;
        -:  112:    }
       1*:  113:    free(t);
       1*:  114:    printf("\n");
       1*:  115:    printf("\n");
       1*:  116:}
------------------
sdl_display:
    #####:   87:void sdl_display(struct graph_t* graph, unsigned int* queens[NUM_PLAYERS],int queens_number, int size){
        -:   88:
    #####:   89:    int n=0;//green 255*255
    #####:   90:    int b=255+255+0;//brown \\white  16777215
    #####:   91:    int bh=65536*255+140;
        -:   92:    (void) bh;
    #####:   93:    int nh=160*65536+100*255+19;//50+255*30+65536*15;
    #####:   94:    int c0=205*205;
    #####:   95:    int c1=16777215;
        -:   96://160*65536+100*255+19; red: 255+255+0;
        -:   97:
        -:   98://65536*80+100;
    #####:   99:int tmp=0;
    #####:  100:    int *t=graph_table(graph);
    #####:  101:    table(queens,t,queens_number);
    #####:  102:    for(int i=0;i<size*size;i++){
    #####:  103:        if(i%size==0 && i!=0) printf("\n");
    #####:  104:        if(t[i]==-1) printf("%d ",nh);
    #####:  105:        if(t[i]==1) printf("%d ",b);
    #####:  106:        if(t[i]==2) printf("%d ", n);
    #####:  107:        if(t[i]==0){
    #####:  108:            if(tmp==0) printf("%d ", c0);
    #####:  109:            if(tmp==1) printf("%d ",c1 );
        -:  110:        }
    #####:  111:        if((i+1)%size!=0 ) tmp=(tmp+1)%2;
        -:  112:    }
    #####:  113:    free(t);
    #####:  114:    printf("\n");
    #####:  115:    printf("\n");
    #####:  116:}
------------------
sdl_display:
        1:   87:void sdl_display(struct graph_t* graph, unsigned int* queens[NUM_PLAYERS],int queens_number, int size){
        -:   88:
        1:   89:    int n=0;//green 255*255
        1:   90:    int b=255+255+0;//brown \\white  16777215
        1:   91:    int bh=65536*255+140;
        -:   92:    (void) bh;
        1:   93:    int nh=160*65536+100*255+19;//50+255*30+65536*15;
        1:   94:    int c0=205*205;
        1:   95:    int c1=16777215;
        -:   96://160*65536+100*255+19; red: 255+255+0;
        -:   97:
        -:   98://65536*80+100;
        1:   99:int tmp=0;
        1:  100:    int *t=graph_table(graph);
        1:  101:    table(queens,t,queens_number);
       17:  102:    for(int i=0;i<size*size;i++){
       16:  103:        if(i%size==0 && i!=0) printf("\n");
      16*:  104:        if(t[i]==-1) printf("%d ",nh);
       16:  105:        if(t[i]==1) printf("%d ",b);
       16:  106:        if(t[i]==2) printf("%d ", n);
       16:  107:        if(t[i]==0){
       12:  108:            if(tmp==0) printf("%d ", c0);
       12:  109:            if(tmp==1) printf("%d ",c1 );
        -:  110:        }
       16:  111:        if((i+1)%size!=0 ) tmp=(tmp+1)%2;
        -:  112:    }
        1:  113:    free(t);
        1:  114:    printf("\n");
        1:  115:    printf("\n");
        1:  116:}
------------------
        -:  117:
        -:  118:/*This function is used to display the current state of the game 
        -:  119:using the console. It takes in the game board, the positions of 
        -:  120:the queens, and the number of queens as parameters. It then 
        -:  121:displays the game board and the queen positions on the console.*/
       4*:  122:void display(struct graph_t* graph, unsigned int* queens[NUM_PLAYERS],unsigned int queens_number){
       4*:  123:    unsigned int length=sqrt(graph->t->size1);
       4*:  124:    int *t = graph_table(graph);
       4*:  125:    table(queens,t,queens_number);
       4*:  126:    int tmp=0;
     173*:  127:    for(unsigned int i=0;i<length*length;i++){
     169*:  128:            if(i%length==0 && i!=0) printf("\n");
     169*:  129:        if(t[i]==-1) printf(ANSI_COLOR_BLACK "  " ANSI_COLOR_RESET);
     169*:  130:        if(t[i]==1) printf(ANSI_COLOR_GREEN "♕ " ANSI_COLOR_RESET);
     169*:  131:        if(t[i]==2) printf(ANSI_COLOR_BLUE "♕ " ANSI_COLOR_RESET);
     169*:  132:        if(t[i]==0){
     141*:  133:            if(tmp==0) printf(ANSI_COLOR_PINK "  " ANSI_COLOR_RESET);
     141*:  134:            if(tmp==1) printf(ANSI_COLOR_VIOLET "  " ANSI_COLOR_RESET);
        -:  135:        }
     169*:  136:        if((i+1)%length!=0 ) tmp=(tmp+1)%2;
        -:  137:    }
       4*:  138:    printf(" \n \n");
        -:  139:    
       4*:  140:    free(t);
       4*:  141:}
------------------
display:
    #####:  122:void display(struct graph_t* graph, unsigned int* queens[NUM_PLAYERS],unsigned int queens_number){
    #####:  123:    unsigned int length=sqrt(graph->t->size1);
    #####:  124:    int *t = graph_table(graph);
    #####:  125:    table(queens,t,queens_number);
    #####:  126:    int tmp=0;
    #####:  127:    for(unsigned int i=0;i<length*length;i++){
    #####:  128:            if(i%length==0 && i!=0) printf("\n");
    #####:  129:        if(t[i]==-1) printf(ANSI_COLOR_BLACK "  " ANSI_COLOR_RESET);
    #####:  130:        if(t[i]==1) printf(ANSI_COLOR_GREEN "♕ " ANSI_COLOR_RESET);
    #####:  131:        if(t[i]==2) printf(ANSI_COLOR_BLUE "♕ " ANSI_COLOR_RESET);
    #####:  132:        if(t[i]==0){
    #####:  133:            if(tmp==0) printf(ANSI_COLOR_PINK "  " ANSI_COLOR_RESET);
    #####:  134:            if(tmp==1) printf(ANSI_COLOR_VIOLET "  " ANSI_COLOR_RESET);
        -:  135:        }
    #####:  136:        if((i+1)%length!=0 ) tmp=(tmp+1)%2;
        -:  137:    }
    #####:  138:    printf(" \n \n");
        -:  139:    
    #####:  140:    free(t);
    #####:  141:}
------------------
display:
        4:  122:void display(struct graph_t* graph, unsigned int* queens[NUM_PLAYERS],unsigned int queens_number){
        4:  123:    unsigned int length=sqrt(graph->t->size1);
        4:  124:    int *t = graph_table(graph);
        4:  125:    table(queens,t,queens_number);
        4:  126:    int tmp=0;
      173:  127:    for(unsigned int i=0;i<length*length;i++){
      169:  128:            if(i%length==0 && i!=0) printf("\n");
     169*:  129:        if(t[i]==-1) printf(ANSI_COLOR_BLACK "  " ANSI_COLOR_RESET);
      169:  130:        if(t[i]==1) printf(ANSI_COLOR_GREEN "♕ " ANSI_COLOR_RESET);
      169:  131:        if(t[i]==2) printf(ANSI_COLOR_BLUE "♕ " ANSI_COLOR_RESET);
      169:  132:        if(t[i]==0){
      141:  133:            if(tmp==0) printf(ANSI_COLOR_PINK "  " ANSI_COLOR_RESET);
      141:  134:            if(tmp==1) printf(ANSI_COLOR_VIOLET "  " ANSI_COLOR_RESET);
        -:  135:        }
      169:  136:        if((i+1)%length!=0 ) tmp=(tmp+1)%2;
        -:  137:    }
        4:  138:    printf(" \n \n");
        -:  139:    
        4:  140:    free(t);
        4:  141:}
------------------
        -:  142:
        -:  143:/*This function allocates memory for a table with the given length and returns 
        -:  144:a pointer to the table.*/
       2*:  145:unsigned int* allouer_table(unsigned int length){
       2*:  146:    unsigned int m = ((length / 10) + 1) * 4;
       2*:  147:    unsigned int *q = (unsigned int *)malloc(sizeof(unsigned int)*m);
        -:  148:    // Initialisation des tableaux
      10*:  149:    for (unsigned int i = 0; i < m; i++) {
       8*:  150:        q[i] = i;  // exemple d'initialisation
        -:  151:    }
       2*:  152:    return q;
        -:  153:}
------------------
allouer_table:
    #####:  145:unsigned int* allouer_table(unsigned int length){
    #####:  146:    unsigned int m = ((length / 10) + 1) * 4;
    #####:  147:    unsigned int *q = (unsigned int *)malloc(sizeof(unsigned int)*m);
        -:  148:    // Initialisation des tableaux
    #####:  149:    for (unsigned int i = 0; i < m; i++) {
    #####:  150:        q[i] = i;  // exemple d'initialisation
        -:  151:    }
    #####:  152:    return q;
        -:  153:}
------------------
allouer_table:
        2:  145:unsigned int* allouer_table(unsigned int length){
        2:  146:    unsigned int m = ((length / 10) + 1) * 4;
        2:  147:    unsigned int *q = (unsigned int *)malloc(sizeof(unsigned int)*m);
        -:  148:    // Initialisation des tableaux
       10:  149:    for (unsigned int i = 0; i < m; i++) {
        8:  150:        q[i] = i;  // exemple d'initialisation
        -:  151:    }
        2:  152:    return q;
        -:  153:}
------------------
        -:  154:
        -:  155:/*This function copies the positions of the queens from one array 
        -:  156:to another. It takes in the source and destination arrays of the positions
        -:  157: of the queens and the number of queens as parameters.*/
       1*:  158:void queens_copy(unsigned int *queen[NUM_PLAYERS],unsigned int *q[NUM_PLAYERS] ,int m){
       3*:  159:     for (int i = 0; i < m; i++) {
       2*:  160:        q[0][i] = queen[0][i];
       2*:  161:        q[1][i] = queen[1][i];
        -:  162:    }
        -:  163:
       1*:  164:}
------------------
queens_copy:
    #####:  158:void queens_copy(unsigned int *queen[NUM_PLAYERS],unsigned int *q[NUM_PLAYERS] ,int m){
    #####:  159:     for (int i = 0; i < m; i++) {
    #####:  160:        q[0][i] = queen[0][i];
    #####:  161:        q[1][i] = queen[1][i];
        -:  162:    }
        -:  163:
    #####:  164:}
------------------
queens_copy:
        1:  158:void queens_copy(unsigned int *queen[NUM_PLAYERS],unsigned int *q[NUM_PLAYERS] ,int m){
        3:  159:     for (int i = 0; i < m; i++) {
        2:  160:        q[0][i] = queen[0][i];
        2:  161:        q[1][i] = queen[1][i];
        -:  162:    }
        -:  163:
        1:  164:}
------------------
        -:  165:
       1*:  166:struct graph_t *graph_cpy(const struct graph_t *graph){
       1*:  167:  struct graph_t *graph_cpy = malloc(sizeof(struct graph_t));
       1*:  168:  gsl_spmatrix_uint *matrix_copy=gsl_spmatrix_uint_alloc(graph->t->size1,graph->t->size2);
       1*:  169:  graph_cpy->t=gsl_spmatrix_uint_compress(matrix_copy, GSL_SPMATRIX_CSR);
       1*:  170:  gsl_spmatrix_uint_memcpy(graph_cpy->t, graph->t); 
       1*:  171:  gsl_spmatrix_uint_free(matrix_copy);
       1*:  172:  graph_cpy->num_vertices = graph->num_vertices;
       1*:  173:  return graph_cpy;
        -:  174:}
------------------
graph_cpy:
    #####:  166:struct graph_t *graph_cpy(const struct graph_t *graph){
    #####:  167:  struct graph_t *graph_cpy = malloc(sizeof(struct graph_t));
    #####:  168:  gsl_spmatrix_uint *matrix_copy=gsl_spmatrix_uint_alloc(graph->t->size1,graph->t->size2);
    #####:  169:  graph_cpy->t=gsl_spmatrix_uint_compress(matrix_copy, GSL_SPMATRIX_CSR);
    #####:  170:  gsl_spmatrix_uint_memcpy(graph_cpy->t, graph->t); 
    #####:  171:  gsl_spmatrix_uint_free(matrix_copy);
    #####:  172:  graph_cpy->num_vertices = graph->num_vertices;
    #####:  173:  return graph_cpy;
        -:  174:}
------------------
graph_cpy:
        1:  166:struct graph_t *graph_cpy(const struct graph_t *graph){
        1:  167:  struct graph_t *graph_cpy = malloc(sizeof(struct graph_t));
        1:  168:  gsl_spmatrix_uint *matrix_copy=gsl_spmatrix_uint_alloc(graph->t->size1,graph->t->size2);
        1:  169:  graph_cpy->t=gsl_spmatrix_uint_compress(matrix_copy, GSL_SPMATRIX_CSR);
        1:  170:  gsl_spmatrix_uint_memcpy(graph_cpy->t, graph->t); 
        1:  171:  gsl_spmatrix_uint_free(matrix_copy);
        1:  172:  graph_cpy->num_vertices = graph->num_vertices;
        1:  173:  return graph_cpy;
        -:  174:}
------------------
        -:  175:/*This function is used to start a new game by choosing the game 
        -:  176:mode. It returns an integer indicating the chosen player.*/
       2*:  177:int start_player(){
       2*:  178:  srand(time(NULL));
       2*:  179:  int ran=rand();
       2*:  180:  return ran%2;
        -:  181:}
------------------
start_player:
    #####:  177:int start_player(){
    #####:  178:  srand(time(NULL));
    #####:  179:  int ran=rand();
    #####:  180:  return ran%2;
        -:  181:}
------------------
start_player:
        2:  177:int start_player(){
        2:  178:  srand(time(NULL));
        2:  179:  int ran=rand();
        2:  180:  return ran%2;
        -:  181:}
------------------
        -:  182:/*This function takes in the current player and returns the next player's
        -:  183: number.*/
       2*:  184:int next_player(int player){
       2*:  185:    if(player==BLACK){
       1*:  186:        return WHITE;
        -:  187:    }
       1*:  188:    return BLACK;
        -:  189:}
